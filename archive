<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Call Schedule</title>


<style>
    /* Font and Color Variables */
:root {
  --font-family: "Calibri", sans-serif;
  --primary-bg-color: #c5c5c535;
  --primary-text-color: rgb(67, 67, 67);
  --secondary-bg-color: #566a87;
  --secondary-text-color: white;
  --highlight-bg-color: rgb(255, 255, 0);
  --today-bg-color: rgb(188, 42, 42);
  --search-bg-color: #e2e2e2;
  --search-btn-bg-color: #c42222;
  --search-btn-hover-bg-color: #9b1a1a;
  --reset-btn-bg-color: #009ac0;
  --reset-btn-hover-bg-color: #006680;
  --print-btn-bg-color: #279250;
  --print-btn-hover-bg-color: #1c6839;
  --table-bg-color: #ffffff;
  --cell-bg-color: rgba(237, 237, 237, 0.4);
  --hover-cell-bg-color: rgba(211, 208, 208, 0.9);
  --hover-column-bg-color: rgba(237, 237, 237, 0.5);
  --header-border-color: black;
  --header-bg-color: #eee;
  --hidden-div-bg-color: rgb(217, 82, 82);
  --header-font-size: 20px;
  --sub-header-font-size: 18px;
  --table-font-size: 12px;
  --title-font-size: 16px;
  --nav-button-font-size: 12px;
}

/* General Resets and Base Styles */
* {
  font-family: var(--font-family);

}

html, body {
  margin: 0;
  padding: 0;
  overflow: hidden;
  height: 100%;
}

/* Sticky Container */
#sticky-container {
  display: flex;
  padding: 10px;
  background-color: var(--primary-bg-color);
  position: sticky;
  z-index: 1000;
  top: 0;

}

#table-wrapper {
  width: 100%;
  overflow: auto;
  z-index: 90;
  height: calc(100vh - 100px); /* Adjust to account for sticky container height */
  overflow-y: auto; /* Only vertical scrollbar for the table */
}

/* Navigation Buttons */
#navButtons {
  display: flex;
  align-items: center;
  gap: 5px;
  flex-grow: 1; /* Allow buttons to grow */
  flex-shrink: 1; /* Allow buttons to shrink */
}

#navButtons button {
  font-size: var(--nav-button-font-size);
  padding: 10px 10px;
  cursor: pointer;
  background-color: var(--search-btn-bg-color);
  color: var(--secondary-text-color);
  border: none;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  transition: background-color 0.5s ease, transform 0.3s ease;
}

#navButtons button:hover {
  background-color: var(--search-btn-hover-bg-color);
  transform: translateY(-1px);
}

#navButtons .print_button {
  background-color: var(--print-btn-bg-color);
  color: rgb(255, 255, 255);
}

#navButtons .print_button:hover {
  background-color: var(--print-btn-hover-bg-color);
}

/* Table Title */
#table-title {
  text-align: center;
  font-size: var(--title-font-size);
  font-weight: bold;
  margin-top: 10px;
  color: var(--primary-text-color);
  margin: 10px auto; /* Center title horizontally */
  flex-grow: 5; /* Allow title to take available space */

}


/* Search Container */
#searchContainer {
  display: flex;
  align-items: center;
  margin-left: auto; /* Pushes search container to the end */

}

/* Filter Column */
#filterColumn {
  height: 40px;
  color: #000;
  appearance: none;
  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" fill="%23000" height="24" viewBox="0 0 24 24" width="24"><path d="M7 10l5 5 5-5z"/><path d="M0 0h24v24H0z" fill="none"/></svg>') no-repeat right 8px center;
  background-color: var(--search-bg-color);
  padding: 10px;
  border: none;
  border-radius: 3px 0 0 3px;
  box-sizing: border-box; /* Ensure padding is included in width */
  transition: width 0.3s ease, background-color 0.3s ease, box-shadow 0.3s ease; /* Smooth transition for width, background color, and box shadow */
}

#searchInput {
  flex: 1;
  padding: 5px;
  border: none;
  height: 30px;
  color: #000;
}

#searchButton {
  height: 40px;
  padding: 0 10px;
  cursor: pointer;
  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" fill="%23fff" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0z" fill="none"/><path d="M21.6 20.2l-3.5-3.5c.8-1.2 1.3-2.7 1.3-4.2 0-4.4-3.6-8-8-8s-8 3.6-8 8 3.6 8 8 8c1.5 0 3-0.5 4.2-1.3l3.5 3.5c0.4 0.4 1 0.4 1.4 0s0.4-1 0-1.4zM4 12c0-3.3 2.7-6 6-6s6 2.7 6 6-2.7 6-6 6-6-2.7-6-6z"/></svg>') no-repeat center;
  background-color: var(--search-btn-bg-color);
  background-size: 50%;
  border: none;
  border-radius: 0 3px 3px 0;
  min-width: 40px;
}

#searchButton:hover {
  background-color: var(--search-btn-hover-bg-color);
}

#resetButton {
  font-size: var(--nav-button-font-size);
  margin-left: 10px;
  padding: 10px;
  cursor: pointer;
  background-color: var(--reset-btn-bg-color);
  color: var(--secondary-text-color);
  border: none;
  border-radius: 3px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  transition: background-color 0.3s ease, transform 0.1s ease;
  flex-grow: 1; /* Allow buttons to grow */
  flex-shrink: 1; /* Allow buttons to shrink */
}

#resetButton:hover {
  background-color: var(--reset-btn-hover-bg-color);
  transform: translateY(-1px);
}

/* Table Styles */
#schedule {
  background-color: var(--table-bg-color);
  border-collapse: collapse;
  width: 100%;

}


/* Header and Cell Styles */
.head-row {
  font-size: var(--table-font-size);
  height: 40px;
  position: sticky;
  background-color: var(--secondary-bg-color);
  color: var(--secondary-text-color);
  z-index: 800;
  top: 0;  /* Stick to the top of the container */

}

.head-cell {
  min-width: 90px;
  padding: 2px;
}

.body-cell {
  font-size: var(--table-font-size);
  height: 30px;
  text-align: center;
}

.head-cell.special-column,
.body-cell.special-column {
  min-width: 45px;
  padding: 5px;
  background-color: #354156;
  color: var(--secondary-text-color);
  z-index: 9;
  position: sticky;

}
/* Sticky Column 1 */
.head-cell.special-column:nth-child(1),
.body-cell.special-column:nth-child(1) {
  left: 0; /* Fixed position for the first column */
}

.head-cell.special-column:nth-child(2),
.body-cell.special-column:nth-child(2) {
  left: 55px;
  position: sticky;


}

.body-row--today {
  background-color: var(--today-bg-color);
  color: var(--secondary-text-color);
}

.body-row:hover:not(.body-row--today) {
  background-color: var(--cell-bg-color);
}




/* Ensure hover effects do not apply to highlighted cells */
.body-cell.highlight:hover {
  background-color: var(--highlight-bg-color);
}

.body-cell.hovered-cell:not(.highlight):not(:nth-child(1)):not(:nth-child(2)) {
  background-color: var(--hover-cell-bg-color);
}

.body-cell.hovered-column:not(.highlight) {
  background-color: var(--hover-column-bg-color);
}

/* Highlight Styles */
.highlight {
  background-color: var(--highlight-bg-color);
}

.body-row--today .body-cell.highlight {
  color: black; /* Ensure text is black in highlighted cells that are in today's row */
}

/* Print Table Styles */
.hidden_div {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  background-color: var(--hidden-div-bg-color);
}

.hidden {
  display: none;
}

.hidden_div img {
  width: 40%;
}

.hidden_div .print_table {}

#page_header {
  width: 100%;
  text-align: center;
  font-size: var(--header-font-size);
}

.hidden_div .header {
  text-align: left;
  font-size: var(--sub-header-font-size);
  background-color: black;
  color: white;
}

.hidden_div .rota_table {
  width: 90%;
  text-align: left;
  margin: 5px;
}

.hidden_div table {
  text-align: left;
  border-collapse: collapse;
  width: 100%;
}

.hidden_div th,
.hidden_div td {
  border: 1px solid #ccc;
  padding: 5px;
  font-size: 14px;
}

.hidden_div th {
  background-color: var(--header-bg-color);
  font-weight: bold;
}


/* For Mobile View */
/* For Mobile View */
@media (max-width: 768px) {
  #sticky-container {
    position: sticky;
    top: 0;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    z-index: 1000;
    width: 100%;
    box-sizing: border-box;
    background-color: #fff;
  }

  #table-wrapper {
    position: relative;
    margin-top: 0;
    width: 100%;
    overflow: auto;
    z-index: 90;
    box-sizing: border-box;
    background-color: #fff;
  }

  #table-title {
    order: 1;
    width: 100%;
    margin-bottom: 10px;
    text-align: center;
    font-size: 14px!important;
  }

  

  #navButtons {
    order: 2;
    width: 100%;
    justify-content: center;
    font-size: 5px!important;
    gap: 5px;
  }

  #navButtons button {
    font-size: 11px; /* Smaller font size */
    padding: 8px 5px; /* Smaller padding */
    width: 80px; /* Smaller width */
  }

  #searchContainer {
    display: none;
  }
  .head-row {
    top: 0; /* Ensure sticky positioning works in mobile */
    z-index: 800; /* Ensure it's above content */
  }

    /* Adjust padding for mobile view */
    .head-cell {
      padding-top: 2px!important; /* Smaller padding for headers */
    }
  
    .body-cell {
      padding-top: 2px!important; /* Smaller padding for cells */
    }
  
    .head-cell.special-column,
    .body-cell.special-column {
      padding-top: 1px!important; /* Smaller padding for special columns */
    }

    

}

</style>

    <script src="https://cdn.jsdelivr.net/npm/moment/moment.js"></script>
</head>

<body>
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Call Schedule</title>
  <link rel="stylesheet" type="text/css" href="main.css">
  <script src="https://cdn.jsdelivr.net/npm/moment/moment.js"></script>
</head>

<body>
  <!-- fixed header bar -->
  <nav id="sticky-container">
    <div id="navButtons">
      <button id="previousWeeksButton">Last Block</button>
      <button id="nextWeeksButton">Next Block</button>
    </div>
    <div id="table-title"></div>
    <div id="searchContainer">
      <!-- search controls (hidden on mobile) -->
      <select id="filterColumn"><option>All</option></select>
      <input id="searchInput" type="text" placeholder="Search name" />
      <button id="searchButton"></button>
      <button id="resetButton">Reset</button>
    </div>
  </nav>

  <!-- desktop table (hidden on mobile) -->
  <div id="table-wrapper">
    <table id="schedule"></table>
  </div>

  <!-- mobile accordion (hidden on desktop) -->
  <div id="mobile-accordion"></div>

    <script type="module">
        const print_button = {

            today: [],
            table: document.createElement("table"),
            rota_table: document.createElement("table"),
            counts: {
                "BLUE JR": { "docs": [] },
                "RED JR": { "docs": [] },
                "CTU ED JR": { "docs": [] },
            },
            rotas_to_count: ["BLUE JR", "RED JR", "CTU ED JR"],

            descriptions: {

                "DATE": "Date",
                "DAY": "Day",
                "BLUE JR": "CTU Blue Jr (Weekend)",
                "RED JR": "CTU Red Jr (Weekend)",
                "CTU ED JR": "CTU ED Jr (Weekend)",
                "WARD NIGHT": "Ward Night Jr (Mon-Thurs)",
                "ED NIGHT": "ED Night Jr (Mon-Thurs)",
                "LATE STAY": "Late Stay Jr (Mon-Thurs)",
                "BLUE SR": "CTU Blue Sr (8am-5pm)",
                "RED SR": "CTU Red Sr (8am-5pm)",
                "CTU ED SR": "CTU ED Sr (8am-5pm)",
                "DAY FLOAT": "CTU Day Float (9am-9pm) (New Consults)",
                "NIGHT FLOAT": "CTU Night Float (9pm-9am) (New Consults)",
                "W/E 24H SS": "RUH Subspecialty",
                "W/D PM SS": "RUH Weekday PM Subspecialty",
                "GIM SPH DAY": "SPH GIM (8am-4pm)",
                "GIM SPH PM": "SPH GIM (4pm-12am)",
                "NEPHRO": "SPH Nephro",
                "CCU JR": "CCU Jr",
                "CCU SR": "CCU Sr",
                "MED STUDENT": "Med Student",
                "CCU JR ATTENDING": "CCU Jr Attending",
                "FELLOW GIM (RUH)": "GIM Fellow (RUH)",
                "FELLOW GIM (SPH)": "GIM Fellow (SPH)",
                "CTU JR ATTENDING": "CTU Jr Attenting",

            },

            html: `
  <div id="print_header">
    <img id="logo" src="https://i.imgur.com/m0VW7QB.png" alt="Logo">

    <p>Saskatoon Internal Medicine Call Schedule</p>
  </div>
`,

            css: `
<style>

p{
font-family: "Calibri", sans-serif;
}

#print_header {
  text-align:center;
  font-size:18px;
}

#logo {
  width: 200px;
  margin-bottom: -10px;
}

.print_table {
  font-family: "Calibri", sans-serif;
  text-align:left;
  font-size: 12px;
  width: 65%;
  margin: auto;
  margin-bottom: 30px;


}

.rota_table {
  font-family: "Calibri", sans-serif;
  margin: auto;
  width: 65%;
  text-align:left;
  padding-left: 10px;
  table-layout: fixed; 
  font-size: 12px;


}

table {
  border-collapse: collapse;
  margin-bottom: 30px;
}

table th {
  border: 1px solid black;
  background-color: #eee;
  text-align:left;
  padding-left: 10px;
  width: 65%;
  color: black;


}

table td {
  border: 1px solid black;
  padding-left: 10px;

}

</style>
`,

            init: function (tbodyElement, theadElement) {

                // GATHER DATA
                for (var y = 0; y < tbodyElement.rows.length; y++) {
                    if (tbodyElement.rows[y].classList.contains("body-row--today")) {
                        for (var x = 0; x < tbodyElement.rows[0].cells.length; x++) {
                            let item = {}
                            item.header = theadElement.rows[0].cells[x].textContent.replace(/\s+/g, ' ').trim();;
                            item.description = this.descriptions[item.header];
                            item.doc = tbodyElement.rows[y].cells[x].textContent.replace(/\s+/g, ' ').trim();;
                            this.today.push(item);
                        }
                    }
                }

                // COUNT DOCS
                for (var x = 0; x < tbodyElement.rows[0].cells.length; x++) {
                    var rota = theadElement.rows[0].cells[x].textContent.replace(/\s+/g, ' ').trim();
                    if (this.rotas_to_count.indexOf(rota) >= 0) {
                        for (var y = 0; y < tbodyElement.rows.length; y++) {
                            var doc = tbodyElement.rows[y].cells[x].textContent.replace(/\s+/g, ' ').trim();
                            this.count_jr(rota, doc);
                        }
                    }
                }

                //  MAKE HIDDEN DIV
                // var hidden_div = document.createElement("DIV");
                // hidden_div.id = "hidden_div";
                // hidden_div.classList.add("hidden_div");
                // hidden_div.classList.add("hidden");

                //  MAKE HEADER
                // var div = document.createElement("DIV");
                // div.id = "page_header";
                // var img = new Image();
                // img.src = "https://drive.google.com/uc?id=1hHp0Oyt3iPyH3pOwoexMbogKWn16uGI4";
                // div.appendChild(img);
                // var p = document.createElement("P");
                // p.textContent = "Saskatoon Internal Medicine Schedule";
                // div.appendChild(p)
                // hidden_div.appendChild(div)

                //  MAKE SCHEDULE TABLE
                this.table.classList.add("print_table");
                // MAKE HEADER
                var row = document.createElement("TR");
                var header = document.createElement("TD");
                header.colSpan = "2";
                header.textContent = this.today[1].doc + ", " + this.today[0].doc;
                header.classList.add("header");
                row.appendChild(header);
                this.table.appendChild(row);
                // MAKE BODY
                for (var i = 2; i < this.today.length; i++) {
                    var row = document.createElement("TR");
                    var th = document.createElement("TH");
                    th.textContent = this.today[i].description;
                    row.appendChild(th);
                    var td = document.createElement("TD");
                    td.textContent = this.today[i].doc;
                    row.appendChild(td);
                    this.table.appendChild(row);
                }
                // hidden_div.appendChild(this.table);

                // MAKE ROTA TABLE
                this.rota_table.classList.add("rota_table");
                // MAKE HEADER
                var row = document.createElement("TR");
                var header = document.createElement("TD");
                header.colSpan = "3";
                header.textContent = "CTU Juniors for " + document.getElementById("table-title").textContent;
                header.classList.add("header");
                row.appendChild(header);
                this.rota_table.appendChild(row);
                // MAKE ROTAS
                var row = document.createElement("TR");
                var th = document.createElement("TH");
                th.textContent = "Blue Juniors";
                row.appendChild(th);
                var th = document.createElement("TH");
                th.textContent = "Red Juniors";
                row.appendChild(th);
                var th = document.createElement("TH");
                th.textContent = "ED Juniors";
                row.appendChild(th);
                this.rota_table.appendChild(row);
                // ADD DOCS
                let biggest_team = 0;
                for (var rota of this.rotas_to_count) {
                    if (this.counts[rota]["docs"].length > biggest_team) {
                        biggest_team = this.counts[rota]["docs"].length;
                    }
                }
                for (var i = 0; i < biggest_team; i++) {
                    var row = document.createElement("TR");
                    for (var rota of this.rotas_to_count) {
                        var td = document.createElement("TD");
                        td.classList.add("rota_doc_td");
                        td.textContent = this.counts[rota]["docs"][i] || "";
                        row.appendChild(td);
                    }
                    this.rota_table.appendChild(row);
                }
                // hidden_div.appendChild(this.rota_table);
                // document.body.appendChild(hidden_div);
                this.render();
            },

            render: function () {
                let button = document.createElement("button");
                button.innerHTML = "Print 24hr Call";
                button.classList.add("print_button");
                button.addEventListener("click", () => {
                    let print_div = window.open("");
                    print_div.document.write(this.html + this.table.outerHTML + this.rota_table.outerHTML + this.css);
                    print_div.print();
                    print_div.onafterprint = () => print_div.close();
                    // document.getElementById("hidden_div").classList.remove("hidden");
                    // window.print();
                    // document.getElementById("hidden_div").classList.add("hidden");
                });
                navButtons.appendChild(button);
            },

            count_jr: function (rota, doc) {
                if (doc === "") return
                if (doc.charAt(doc.length - 1) === "*") return
                if (doc in this.counts[rota]) {
                    this.counts[rota][doc]++
                }
                else {
                    this.counts[rota][doc] = 1
                    this.counts[rota]["docs"].push(doc);
                }
            }
        }

        import { print_button } from "./print_button.js";

document.addEventListener("DOMContentLoaded", async function () {
  // ─────────────────────────────────────────────────────────────────────────────
  // CONSTANTS & ELEMENT REFERENCES
  // ─────────────────────────────────────────────────────────────────────────────
  const dataUrl =
    "https://docs.google.com/spreadsheets/d/e/2PACX-1vRhBfkLZwlSmj2Rh0w8AFLlirlzCm_26qZnf4tIcE5e8qgqQz7NtFBZyhBRX61TB0-jCignTKJNdOty/pub?gid=0&single=true&output=tsv";
  const moment =
    window.moment ||
    (await import("https://cdn.jsdelivr.net/momentjs/latest/moment.min.js")).default;

  const tableElement = document.getElementById("schedule");
  const theadElement = document.createElement("thead");
  const tbodyElement = document.createElement("tbody");
  const filterDropdown = document.getElementById("filterColumn");
  const nextWeeksButton = document.getElementById("nextWeeksButton");
  const previousWeeksButton = document.getElementById("previousWeeksButton");
  const searchInput = document.getElementById("searchInput");
  const searchButton = document.getElementById("searchButton");
  const resetButton = document.getElementById("resetButton");
  const mobileAccordionContainer = document.getElementById("mobile-accordion");

  // ─────────────────────────────────────────────────────────────────────────────
  // DATE CALCULATIONS
  // ─────────────────────────────────────────────────────────────────────────────
  let currentDate = moment().startOf("day");

  function determineSchoolYearStart() {
    const julyFirstThisYear = moment(
      `${currentDate.year()}-07-01`,
      "YYYY-MM-DD"
    );
    const year = currentDate.isSameOrAfter(julyFirstThisYear)
      ? currentDate.year()
      : currentDate.year() - 1;
    return moment(`${year}-07-01`, "YYYY-MM-DD");
  }

  let schoolYearStart = determineSchoolYearStart();
  let specificYear = schoolYearStart.year();

  // ─────────────────────────────────────────────────────────────────────────────
  // STATE VARIABLES
  // ─────────────────────────────────────────────────────────────────────────────
  let tableData = [];
  let selectedColumnIndex = -1;
  let currentBlockStartDate;
  let currentBlockEndDate;
  let daysElapsed = Math.ceil(currentDate.diff(schoolYearStart, "days"));
  let blockNumber = Math.ceil(daysElapsed / 28);

  // ─────────────────────────────────────────────────────────────────────────────
  // FETCH & INITIALIZE
  // ─────────────────────────────────────────────────────────────────────────────
  async function getTableData() {
    try {
      const response = await fetch(dataUrl, { cache: "reload" });
      const csvData = await response.text();
      return csvData.split("\n").map((row) => row.split("\t"));
    } catch (error) {
      console.error("Error fetching data:", error);
      return [];
    }
  }

  async function initializeTable() {
    tableData = await getTableData();

    // If today is July 1, reset to Block 1 of new school year
    if (
      currentDate.isSame(
        moment(`${specificYear}-07-01`, "YYYY-MM-DD"),
        "day"
      )
    ) {
      schoolYearStart = moment(`${currentDate.year()}-07-01`, "YYYY-MM-DD");
      specificYear = schoolYearStart.year();
      currentDate = moment().startOf("day");
      daysElapsed = Math.ceil(currentDate.diff(schoolYearStart, "days"));
      blockNumber = 1;
    } else {
      blockNumber = Math.ceil(daysElapsed / 28);
      if (blockNumber < 1) blockNumber = 1;
      if (blockNumber > 13) blockNumber = 13;
    }

    currentBlockStartDate = schoolYearStart
      .clone()
      .add((blockNumber - 1) * 28, "days");
    if (blockNumber === 13) {
      currentBlockEndDate = moment(
        `${specificYear + 1}-06-30`,
        "YYYY-MM-DD"
      );
    } else {
      currentBlockEndDate = currentBlockStartDate.clone().add(27, "days");
    }

    // If today isn’t in this calculated block, move to next block
    if (
      !(
        currentDate.isSameOrAfter(currentBlockStartDate) &&
        currentDate.isSameOrBefore(currentBlockEndDate)
      )
    ) {
      moveToNextBlock();
    }

    // Build thead / tbody, set dropdown, title, table
    theadElement.appendChild(createTableHeader(tableData[0]));
    tableElement.appendChild(theadElement);
    tableElement.appendChild(tbodyElement);
    updateFilterDropdown(tableData[0]);
    updateTitle();
    updateTable();

    // Build mobile accordion on first load
    buildMobileAccordion();
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // UTILITY FUNCTIONS
  // ─────────────────────────────────────────────────────────────────────────────
  function isToday(date) {
    return moment(date).isSame(moment(), "day");
  }

  function updateTitle() {
    const titleElement = document.getElementById("table-title");
    const titleText = `Block ${blockNumber}: ${currentBlockStartDate.format(
      "MMM D, YYYY"
    )} - ${currentBlockEndDate.format("MMM D, YYYY")}`;
    titleElement.textContent = titleText;
  }

  function createTableHeader(data) {
    const trElement = document.createElement("tr");
    trElement.setAttribute("class", "head-row");

    // First two columns: DATE and DAY
    ["DATE", "DAY"].forEach((item, index) => {
      const thElement = document.createElement("th");
      thElement.setAttribute(
        "class",
        `head-cell${index === 0 || index === 1 ? " special-column" : ""}`
      );
      thElement.innerHTML = `<span>${item}</span>`;
      trElement.appendChild(thElement);
    });

    // Remaining columns: everyone else
    data.slice(2).forEach((item) => {
      const thElement = document.createElement("th");
      thElement.setAttribute("class", "head-cell");
      thElement.innerHTML = `<span>${item}</span>`;
      trElement.appendChild(thElement);
    });

    return trElement;
  }

  function createTrForTableBody(data) {
    const trElement = document.createElement("tr");
    trElement.setAttribute("class", "body-row");

    const date = moment(data[0]).toDate();
    if (isToday(date)) {
      trElement.classList.add("body-row--today");
    }

    // DATE cell
    const dateValue = data[0];
    const dateCell = document.createElement("td");
    const formattedDate = moment(dateValue).format("MMM D");
    dateCell.setAttribute("class", "body-cell special-column");
    dateCell.innerHTML = `<span>${formattedDate}</span>`;
    trElement.appendChild(dateCell);

    // DAY cell
    const dayValue = data[1];
    const dayCell = document.createElement("td");
    dayCell.setAttribute("class", "body-cell special-column");
    dayCell.innerHTML = `<span>${dayValue}</span>`;
    trElement.appendChild(dayCell);

    // Assignment columns
    if (selectedColumnIndex !== -1) {
      const tdElement = document.createElement("td");
      tdElement.setAttribute("class", "body-cell");
      tdElement.innerHTML = `<span>${data[selectedColumnIndex]}</span>`;
      trElement.appendChild(tdElement);
    } else {
      data.slice(2).forEach((item) => {
        const tdElement = document.createElement("td");
        tdElement.setAttribute("class", "body-cell");
        tdElement.innerHTML = `<span>${item}</span>`;
        trElement.appendChild(tdElement);
      });
    }

    return trElement;
  }

  function updateTable() {
    tbodyElement.innerHTML = "";

    if (filterDropdown.value === "default") {
      selectedColumnIndex = -1;
      filterDropdown.value = "default";
      theadElement.innerHTML = "";
      theadElement.appendChild(createTableHeader(tableData[0]));

      for (let i = 1; i < tableData.length; i++) {
        const trElementForBody = createTrForTableBody(tableData[i]);
        const rowDate = moment(tableData[i][0]).toDate();
        if (
          rowDate >= currentBlockStartDate &&
          rowDate <= currentBlockEndDate
        ) {
          tbodyElement.appendChild(trElementForBody);
        }
        if (isToday(rowDate)) {
          trElementForBody.classList.add("body-row--today");
        }
      }
    } else {
      const headerData = ["DATE", "DAY"];
      if (selectedColumnIndex !== -1) {
        headerData.push(tableData[0][selectedColumnIndex]);
      } else {
        headerData.push("DATE", "DAY");
      }
      theadElement.innerHTML = "";
      theadElement.appendChild(createTableHeader(headerData));

      for (let i = 1; i < tableData.length; i++) {
        const trElementForBody = createTrForTableBody(tableData[i]);
        const rowDate = moment(tableData[i][0]).toDate();
        if (
          rowDate >= currentBlockStartDate &&
          rowDate <= currentBlockEndDate
        ) {
          tbodyElement.appendChild(trElementForBody);
        }
        if (isToday(rowDate)) {
          trElementForBody.classList.add("body-row--today");
        }
      }
    }

    tableElement.innerHTML = "";
    tableElement.appendChild(theadElement);
    tableElement.appendChild(tbodyElement);

    // Rebuild the mobile accordion whenever the table changes
    buildMobileAccordion();
  }

  function updateFilterDropdown(data) {
    filterDropdown.innerHTML = "";
    const defaultOption = document.createElement("option");
    defaultOption.value = "default";
    defaultOption.textContent = "All";
    filterDropdown.appendChild(defaultOption);

    data.slice(2).forEach((item, index) => {
      const optionElement = document.createElement("option");
      optionElement.value = (index + 2).toString();
      optionElement.textContent = item;
      filterDropdown.appendChild(optionElement);
    });

    adjustFilterColumnWidth();
  }

  function scrollToTodayRow() {
    const todayRow = document.querySelector(".body-row--today");
    if (todayRow) {
      todayRow.scrollIntoView({ behavior: "smooth", block: "center" });
    }
  }

  function adjustFilterColumnWidth() {
    const selectedOption =
      filterDropdown.options[filterDropdown.selectedIndex];
    const selectedOptionText = selectedOption.textContent;
    const paddingAndMargin = 35;
    const selectedOptionWidth =
      getTextWidth(selectedOptionText) + paddingAndMargin;
    filterDropdown.style.width = `${selectedOptionWidth}px`;
    filterDropdown.style.minWidth = `${selectedOptionWidth}px`;
  }

  function getTextWidth(text) {
    const span = document.createElement("span");
    span.style.visibility = "hidden";
    span.style.whiteSpace = "nowrap";
    span.innerText = text;
    document.body.appendChild(span);
    const width = span.offsetWidth;
    document.body.removeChild(span);
    return width;
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // NAVIGATION: Next/Previous Block
  // ─────────────────────────────────────────────────────────────────────────────
  function moveToNextBlock() {
    if (blockNumber < 13) {
      blockNumber++;
    } else {
      specificYear += 1;
      schoolYearStart = moment(`${specificYear}-07-01`, "YYYY-MM-DD");
      blockNumber = 1;
    }
    updateDates();
  }

  function moveToPreviousBlock() {
    if (blockNumber > 1) {
      blockNumber--;
    } else {
      specificYear -= 1;
      schoolYearStart = moment(`${specificYear}-07-01`, "YYYY-MM-DD");
      blockNumber = 13;
    }
    updateDates();
  }

  function updateDates() {
    currentBlockStartDate = schoolYearStart
      .clone()
      .add((blockNumber - 1) * 28, "days");
    if (blockNumber === 13) {
      currentBlockEndDate = moment(
        `${specificYear + 1}-06-30`,
        "YYYY-MM-DD"
      );
    } else {
      currentBlockEndDate = currentBlockStartDate.clone().add(27, "days");
    }
    theadElement.innerHTML = "";
    theadElement.appendChild(createTableHeader(tableData[0]));
    tableElement.appendChild(theadElement);
    tableElement.appendChild(tbodyElement);
    updateFilterDropdown(tableData[0]);
    updateTitle();
    updateTable();
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // HIGHLIGHT + HOVER EFFECTS
  // ─────────────────────────────────────────────────────────────────────────────
  function highlightCells() {
    const searchTerm = searchInput.value.trim().toLowerCase();
    const cells = document.querySelectorAll(".body-cell");
    cells.forEach((cell) => {
      const text = cell.textContent.toLowerCase();
      const row = cell.parentElement;
      if (searchTerm && text.includes(searchTerm)) {
        cell.classList.add("highlight");
        if (row.classList.contains("body-row--today")) {
          cell.style.color = "black";
        } else {
          cell.style.color = "";
        }
      } else {
        cell.classList.remove("highlight");
        cell.style.color = "";
      }
    });
  }

  function highlightColumn(index) {
    const cells = document.querySelectorAll(`.body-cell:nth-child(${index + 1})`);
    cells.forEach((cell) => {
      cell.classList.add("hovered-column");
    });
  }

  function unhighlightColumns() {
    const cells = document.querySelectorAll(".hovered-column");
    cells.forEach((cell) => {
      cell.classList.remove("hovered-column");
    });
  }

  function handleHover(event) {
    const target = event.target;
    const cell = target.closest("th, td");
    if (cell && cell.classList.contains("body-cell")) {
      const columnIndex = Array.from(cell.parentNode.children).indexOf(cell);
      if (columnIndex >= 2) {
        if (event.type === "mouseover") {
          cell.classList.add("hovered-cell");
          highlightColumn(columnIndex);
        } else if (event.type === "mouseout") {
          cell.classList.remove("hovered-cell");
          unhighlightColumns();
        }
      }
    }
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // MOBILE ACCORDION (DATE‐CENTERED)
  // ─────────────────────────────────────────────────────────────────────────────
// ─────────────────────────────────────────────────────────────────────────────
// MOBILE ACCORDION (Date‐Centered, Auto‐Open Today)
// ─────────────────────────────────────────────────────────────────────────────
function buildMobileAccordion() {
  if (window.innerWidth > 768) {
    mobileAccordionContainer.innerHTML = "";
    return;
  }

  const thead = tableElement.querySelector("thead");
  const tbody = tableElement.querySelector("tbody");
  if (!thead || !tbody) {
    mobileAccordionContainer.innerHTML = "";
    return;
  }

  const allTh = Array.from(thead.querySelectorAll("th"));
  const columnHeaders = allTh.slice(2).map(th => th.innerText.trim());
  const bodyRows = Array.from(tbody.querySelectorAll("tr.body-row"));

  mobileAccordionContainer.innerHTML = "";
  let todayHeaderButton = null;

  bodyRows.forEach((row, rowIndex) => {
    const tdCells = Array.from(row.querySelectorAll("td"));
    const dateText = tdCells[0]?.innerText.trim() || "";
    const dayText  = tdCells[1]?.innerText.trim() || "";
    if (!dateText) return;

    const headerLabel = `${dateText} (${dayText})`;
    const panelId = `mobile-panel-${rowIndex}`;

    // Create header button
    const headerButton = document.createElement("button");
    headerButton.classList.add("accordion-header");
    headerButton.setAttribute("aria-expanded", "false");
    headerButton.setAttribute("aria-controls", panelId);
    headerButton.innerText = headerLabel;

    // Create panel div
    const panelDiv = document.createElement("div");
    panelDiv.classList.add("accordion-panel");
    panelDiv.id = panelId;
    // No inline display toggle—CSS handles it via .expanded

    // Populate panel contents
    columnHeaders.forEach((colName, colIdx) => {
      const assignCell = tdCells[colIdx + 2];
      const assignText = assignCell ? assignCell.innerText.trim() : "";
      if (assignText) {
        const item = document.createElement("div");
        item.classList.add("accordion-item");
        item.innerText = `${colName}: ${assignText}`;
        panelDiv.appendChild(item);
      }
    });

    // Remember today’s button to auto‐open later
    if (row.classList.contains("body-row--today")) {
      todayHeaderButton = headerButton;
    }

    // NEW: smoother toggle using “expanded” class, not display
    headerButton.addEventListener("click", () => {
      const isOpen = headerButton.getAttribute("aria-expanded") === "true";
      headerButton.setAttribute("aria-expanded", String(!isOpen));
      if (isOpen) {
        panelDiv.classList.remove("expanded");
      } else {
        panelDiv.classList.add("expanded");
      }
    });

    mobileAccordionContainer.appendChild(headerButton);
    mobileAccordionContainer.appendChild(panelDiv);
  });

  // Auto‐open today’s panel as before
  if (todayHeaderButton) {
    todayHeaderButton.setAttribute("aria-expanded", "true");
    const todayPanelDiv = document.getElementById(todayHeaderButton.getAttribute("aria-controls"));
    if (todayPanelDiv) {
      todayPanelDiv.classList.add("expanded");
    }
    setTimeout(() => {
      todayHeaderButton.scrollIntoView({ behavior: "smooth", block: "start" });
    }, 50);
  }
}


  // ─────────────────────────────────────────────────────────────────────────────
  // EVENT LISTENERS
  // ─────────────────────────────────────────────────────────────────────────────
  searchInput.addEventListener("input", highlightCells);
  searchInput.addEventListener("keyup", (event) => {
    if (event.key === "Enter") {
      searchInput.blur();
      highlightCells();
    }
  });
  searchButton.addEventListener("click", highlightCells);

  resetButton.addEventListener("click", () => {
    searchInput.value = "";
    highlightCells();
    filterDropdown.value = "default";
    updateTable();
  });

  nextWeeksButton.addEventListener("click", () => {
    moveToNextBlock();
    updateTable();
    updateTitle();
  });

  previousWeeksButton.addEventListener("click", () => {
    moveToPreviousBlock();
    updateTable();
    updateTitle();
  });

  filterDropdown.addEventListener("change", () => {
    selectedColumnIndex = parseInt(filterDropdown.value);
    adjustFilterColumnWidth();
    updateTable();
  });

  tableElement.addEventListener("mouseover", handleHover);
  tableElement.addEventListener("mouseout", handleHover);

  window.addEventListener("resize", () => {
    buildMobileAccordion();
  });

  // ─────────────────────────────────────────────────────────────────────────────
  // INITIALIZE EVERYTHING
  // ─────────────────────────────────────────────────────────────────────────────
  await initializeTable();
  print_button.init(tbodyElement, theadElement);
  scrollToTodayRow();
});

    </script>
</body>
</html>